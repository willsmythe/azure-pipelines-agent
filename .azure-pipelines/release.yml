jobs:

################################################################################
- job: build_windows_agent_x64
################################################################################
  displayName: Windows Agent (x64)
  pool:
    vmImage: vs2017-win2016
  steps:

  # Steps template for windows platform
  - template: template-windows.yml
  
  # Package dotnet core windows dependency (VC++ Redistributable)
  - powershell: |
      Write-Host "Downloading 'VC++ Redistributable' package."
      $outDir = Join-Path -Path $env:TMP -ChildPath ([Guid]::NewGuid())
      New-Item -Path $outDir -ItemType directory 
      $outFile = Join-Path -Path $outDir -ChildPath "ucrt.zip"
      Invoke-WebRequest -Uri https://vstsagenttools.blob.core.windows.net/tools/ucrt/ucrt_x64.zip -OutFile $outFile
      Write-Host "Unzipping 'VC++ Redistributable' package to agent layout."
      $unzipDir = Join-Path -Path $outDir -ChildPath "unzip"
      Add-Type -AssemblyName System.IO.Compression.FileSystem
      [System.IO.Compression.ZipFile]::ExtractToDirectory($outFile, $unzipDir)
      $agentLayoutBin = Join-Path -Path $(Build.SourcesDirectory) -ChildPath "_layout\bin"
      Copy-Item -Path $unzipDir -Destination $agentLayoutBin -Force
    displayName: Package UCRT


  # Signing steps
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    inputs:
      ConnectedServiceName: VSTSAgentESRP
      FolderPath: '_layout\bin'
      Pattern: AgentService.exe
      signConfigType: inlineSignParams
      inlineOperation: |
        [{
        "keyCode": "CP-235845-SN",
        "operationSetCode": "StrongNameSign",
        "parameters": [],
        "toolName": "sign",
        "toolVersion": "1.0"
        },
        {
        "keyCode": "CP-235845-SN",
        "operationSetCode": "StrongNameVerify",
        "parameters": [],
        "toolName": "sign",
        "toolVersion": "1.0"
        }
        ]
    displayName: Sign Agent Assemblies (Strong Name Signing)

  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    inputs:
      ConnectedServiceName: VSTSAgentESRP
      FolderPath: '_layout\bin'
      Pattern: |
        Agent.*.dll
        Agent.*.exe
        Microsoft.VisualStudio.Services.Agent.dll
        AgentService.exe
      UseMinimatch: true
      signConfigType: inlineSignParams
      inlineOperation: |
        [{
        "keyCode": "CP-230012",
        "operationSetCode": "SigntoolSign",
        "parameters": [{
        "parameterName": "OpusName",
        "parameterValue": "Microsoft"
        },
        {
        "parameterName": "OpusInfo",
        "parameterValue": "http://www.microsoft.com"
        },
        {
        "parameterName": "FileDigest",
        "parameterValue": "/fd \"SHA256\""
        },
        {
        "parameterName": "PageHash",
        "parameterValue": "/NPH"
        },
        {
        "parameterName": "TimeStamp",
        "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
        }
        ],
        "toolName": "sign",
        "toolVersion": "1.0"
        },
        {
        "keyCode": "CP-230012",
        "operationSetCode": "SigntoolVerify",
        "parameters": [],
        "toolName": "sign",
        "toolVersion": "1.0"
        }
        ]
    displayName: Sign Agent Assemblies (Authenticode Signing)

  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    inputs:
      ConnectedServiceName: VSTSAgentESRP
      FolderPath: '_layout'
      Pattern: |
        bin\powershell\**\*.ps1
        bin\powershell\**\*.psm1
        externals\vstshost\**\*.ps1
        externals\vstshost\**\*.psd1
        externals\vstshost\**\*.psm1
      UseMinimatch: true
      signConfigType: inlineSignParams
      inlineOperation: |
        [{
        "keyCode": "CP-230012",
        "operationSetCode": "SigntoolSign",
        "parameters": [{
        "parameterName": "OpusName",
        "parameterValue": "Microsoft"
        },
        {
        "parameterName": "OpusInfo",
        "parameterValue": "http://www.microsoft.com"
        },
        {
        "parameterName": "FileDigest",
        "parameterValue": "/fd \"SHA256\""
        },
        {
        "parameterName": "PageHash",
        "parameterValue": "/NPH"
        },
        {
        "parameterName": "TimeStamp",
        "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
        }
        ],
        "toolName": "sign",
        "toolVersion": "1.0"
        },
        {
        "keyCode": "CP-230012",
        "operationSetCode": "SigntoolVerify",
        "parameters": [],
        "toolName": "sign",
        "toolVersion": "1.0"
        }
        ]
    displayName: Sign PowerShell Scripts (Authenticode Signing)

  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    inputs:
      ConnectedServiceName: VSTSAgentESRP
      FolderPath: '_layout'
      Pattern: |
        bin\Ben.Demystifier.dll
        bin\Newtonsoft.Json.dll
        bin\YamlDotNet.dll
        bin\DotNet.Glob.dll
        externals\git\**\*.dll
        externals\git\**\*.exe
        externals\node\bin\node.exe
        externals\vstshost\Minimatch.dll
        externals\vstsom\Newtonsoft.Json.dll
      UseMinimatch: true
      signConfigType: inlineSignParams
      inlineOperation: |
        [{
        "keyCode": "CP-231522",
        "operationSetCode": "SigntoolSign",
        "parameters": [{
        "parameterName": "OpusName",
        "parameterValue": "Microsoft"
        },
        {
        "parameterName": "OpusInfo",
        "parameterValue": "http://www.microsoft.com"
        },
        {
        "parameterName": "Append",
        "parameterValue": "/as"
        },
        {
        "parameterName": "FileDigest",
        "parameterValue": "/fd \"SHA256\""
        },
        {
        "parameterName": "PageHash",
        "parameterValue": "/NPH"
        },
        {
        "parameterName": "TimeStamp",
        "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
        }
        ],
        "toolName": "sign",
        "toolVersion": "1.0"
        },
        {
        "keyCode": "CP-231522",
        "operationSetCode": "SigntoolVerify",
        "parameters": [],
        "toolName": "sign",
        "toolVersion": "1.0"
        }
        ]
    displayName: Sign Agent Assemblies (3rd Party Assemblies Signing)

  - task: DeleteFiles@1
    inputs:
      SourceFolder: '_layout'
      Contents: '**\CodeSignSummary-*.md'
    displayName: Delete CodeSignSummary.md

  # Create agent package zip
  - script: dev.cmd package Release
    workingDirectory: src
    displayName: Package Release

  # Upload agent package zip as build artifact
  - task: PublishBuildArtifacts@1
    displayName: Publish Artifact (Windows)
    inputs:
      pathToPublish: _package
      artifactName: agent
      artifactType: container

################################################################################
- job: build_windows_agent_x86
################################################################################
  displayName: Windows Agent (x86)
  pool:
    name: buildDevs
    demands: 'Agent.OSArchitecture -equals X86'
  steps:

  # Steps template for windows platform
  - template: template-windows.yml
  
  # Package dotnet core windows dependency (VC++ Redistributable)
  - powershell: |
      Write-Host "Downloading 'VC++ Redistributable' package."
      $outDir = Join-Path -Path $env:TMP -ChildPath ([Guid]::NewGuid())
      New-Item -Path $outDir -ItemType directory 
      $outFile = Join-Path -Path $outDir -ChildPath "ucrt.zip"
      Invoke-WebRequest -Uri https://vstsagenttools.blob.core.windows.net/tools/ucrt/ucrt_x86.zip -OutFile $outFile
      Write-Host "Unzipping 'VC++ Redistributable' package to agent layout."
      $unzipDir = Join-Path -Path $outDir -ChildPath "unzip"
      Add-Type -AssemblyName System.IO.Compression.FileSystem
      [System.IO.Compression.ZipFile]::ExtractToDirectory($outFile, $unzipDir)
      $agentLayoutBin = Join-Path -Path $(Build.SourcesDirectory) -ChildPath "_layout\bin"
      Copy-Item -Path $unzipDir -Destination $agentLayoutBin -Force
    displayName: Package UCRT

  # Signing steps
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    inputs:
      ConnectedServiceName: VSTSAgentESRP
      FolderPath: '_layout\bin'
      Pattern: AgentService.exe
      signConfigType: inlineSignParams
      inlineOperation: |
        [{
        "keyCode": "CP-235845-SN",
        "operationSetCode": "StrongNameSign",
        "parameters": [],
        "toolName": "sign",
        "toolVersion": "1.0"
        },
        {
        "keyCode": "CP-235845-SN",
        "operationSetCode": "StrongNameVerify",
        "parameters": [],
        "toolName": "sign",
        "toolVersion": "1.0"
        }
        ]
    displayName: Sign Agent Assemblies (Strong Name Signing)

  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    inputs:
      ConnectedServiceName: VSTSAgentESRP
      FolderPath: '_layout\bin'
      Pattern: |
        Agent.*.dll
        Agent.*.exe
        Microsoft.VisualStudio.Services.Agent.dll
        AgentService.exe
      UseMinimatch: true
      signConfigType: inlineSignParams
      inlineOperation: |
        [{
        "keyCode": "CP-230012",
        "operationSetCode": "SigntoolSign",
        "parameters": [{
        "parameterName": "OpusName",
        "parameterValue": "Microsoft"
        },
        {
        "parameterName": "OpusInfo",
        "parameterValue": "http://www.microsoft.com"
        },
        {
        "parameterName": "FileDigest",
        "parameterValue": "/fd \"SHA256\""
        },
        {
        "parameterName": "PageHash",
        "parameterValue": "/NPH"
        },
        {
        "parameterName": "TimeStamp",
        "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
        }
        ],
        "toolName": "sign",
        "toolVersion": "1.0"
        },
        {
        "keyCode": "CP-230012",
        "operationSetCode": "SigntoolVerify",
        "parameters": [],
        "toolName": "sign",
        "toolVersion": "1.0"
        }
        ]
    displayName: Sign Agent Assemblies (Authenticode Signing)

  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    inputs:
      ConnectedServiceName: VSTSAgentESRP
      FolderPath: '_layout'
      Pattern: |
        bin\powershell\**\*.ps1
        bin\powershell\**\*.psm1
      UseMinimatch: true
      signConfigType: inlineSignParams
      inlineOperation: |
        [{
        "keyCode": "CP-230012",
        "operationSetCode": "SigntoolSign",
        "parameters": [{
        "parameterName": "OpusName",
        "parameterValue": "Microsoft"
        },
        {
        "parameterName": "OpusInfo",
        "parameterValue": "http://www.microsoft.com"
        },
        {
        "parameterName": "FileDigest",
        "parameterValue": "/fd \"SHA256\""
        },
        {
        "parameterName": "PageHash",
        "parameterValue": "/NPH"
        },
        {
        "parameterName": "TimeStamp",
        "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
        }
        ],
        "toolName": "sign",
        "toolVersion": "1.0"
        },
        {
        "keyCode": "CP-230012",
        "operationSetCode": "SigntoolVerify",
        "parameters": [],
        "toolName": "sign",
        "toolVersion": "1.0"
        }
        ]
    displayName: Sign PowerShell Scripts (Authenticode Signing)

  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    inputs:
      ConnectedServiceName: VSTSAgentESRP
      FolderPath: '_layout'
      Pattern: |
        bin\Ben.Demystifier.dll
        bin\Newtonsoft.Json.dll
        bin\YamlDotNet.dll
        bin\DotNet.Glob.dll
        externals\git\**\*.dll
        externals\git\**\*.exe
        externals\node\bin\node.exe
        externals\vstshost\Minimatch.dll
        externals\vstsom\Newtonsoft.Json.dll
      UseMinimatch: true
      signConfigType: inlineSignParams
      inlineOperation: |
        [{
        "keyCode": "CP-231522",
        "operationSetCode": "SigntoolSign",
        "parameters": [{
        "parameterName": "OpusName",
        "parameterValue": "Microsoft"
        },
        {
        "parameterName": "OpusInfo",
        "parameterValue": "http://www.microsoft.com"
        },
        {
        "parameterName": "Append",
        "parameterValue": "/as"
        },
        {
        "parameterName": "FileDigest",
        "parameterValue": "/fd \"SHA256\""
        },
        {
        "parameterName": "PageHash",
        "parameterValue": "/NPH"
        },
        {
        "parameterName": "TimeStamp",
        "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
        }
        ],
        "toolName": "sign",
        "toolVersion": "1.0"
        },
        {
        "keyCode": "CP-231522",
        "operationSetCode": "SigntoolVerify",
        "parameters": [],
        "toolName": "sign",
        "toolVersion": "1.0"
        }
        ]
    displayName: Sign Agent Assemblies (3rd Party Assemblies Signing)

  - task: DeleteFiles@1
    inputs:
      SourceFolder: '_layout'
      Contents: '**\CodeSignSummary-*.md'
    displayName: Delete CodeSignSummary.md

  # Create agent package zip
  - script: dev.cmd package Release
    workingDirectory: src
    displayName: Package Release

  # Upload agent package zip as build artifact
  - task: PublishBuildArtifacts@1
    displayName: Publish Artifact (Windows)
    inputs:
      pathToPublish: _package
      artifactName: agent
      artifactType: container

################################################################################
- job: build_linux_agent_x64
################################################################################
  displayName: Linux Agent (x64)
  pool:
    vmImage: ubuntu-16.04
  steps:

  # Steps template for non-windows platform
  - template: template-nonwindows.yml

  # Create agent package zip
  - script: ./dev.sh package Release
    workingDirectory: src
    displayName: Package Release    

  # Upload agent package zip as build artifact
  - task: PublishBuildArtifacts@1
    displayName: Publish Artifact (Linux)    
    inputs:
      pathToPublish: _package
      artifactName: agent
      artifactType: container

################################################################################
- job: build_linux_agent_arm
################################################################################
  displayName: Linux Agent (ARM)
  pool:
    name: buildDevs
    demands: 'Agent.OSArchitecture -equals ARM'
  steps:

  # Steps template for non-windows platform
  - template: template-nonwindows.yml

  # Create agent package zip
  - script: ./dev.sh package Release
    workingDirectory: src
    displayName: Package Release    

  # Upload agent package zip as build artifact
  - task: PublishBuildArtifacts@1
    displayName: Publish Artifact (Linux)    
    inputs:
      pathToPublish: _package
      artifactName: agent
      artifactType: container


################################################################################
- job: build_osx_agent
################################################################################
  displayName: macOS Agent (x64)
  pool:
    vmImage: macOS-10.13
  steps:

  # Steps template for windows platform
  - template: template-nonwindows.yml
  
  # Create agent package zip
  - script: ./dev.sh package Release
    workingDirectory: src
    displayName: Package Release    

  # Upload agent package zip as build artifact
  - task: PublishBuildArtifacts@1
    displayName: Publish Artifact (OSX)    
    inputs:
      pathToPublish: _package
      artifactName: agent
      artifactType: container

################################################################################
- job: publish_agent_packages
################################################################################
  displayName: Publish Agents (Windows/Linux/OSX)
  pool:
    name: ProductionRMAgents
  dependsOn: 
  - build_windows_agent_x86
  - build_windows_agent_x64
  - build_osx_agent
  - build_linux_agent_x64
  - build_linux_agent_arm
  steps:
  
  # Clean
  - checkout: self
    clean: true
  
  # Download all agent packages from all previous phases
  - task: DownloadBuildArtifacts@0
    displayName: Download Agent Packages
    inputs:
      artifactName: agent

  # Upload agent packages to Azure blob storage and refresh Azure CDN
  - powershell: |
      Write-Host "Preloading Azure modules." # This is for better performance, to avoid module-autoloading.
      Import-Module AzureRM, AzureRM.profile, AzureRM.Storage, Azure.Storage, AzureRM.Cdn -ErrorAction Ignore -PassThru
      $uploadFiles = New-Object System.Collections.ArrayList
      $certificateThumbprint = (Get-ItemProperty -Path "$(ServicePrincipalReg)").ServicePrincipalCertThumbprint
      $clientId = (Get-ItemProperty -Path "$(ServicePrincipalReg)").ServicePrincipalClientId
      Write-Host "##vso[task.setsecret]$certificateThumbprint"
      Write-Host "##vso[task.setsecret]$clientId"
      Login-AzureRmAccount -ServicePrincipal -CertificateThumbprint $certificateThumbprint -ApplicationId $clientId -TenantId $(TenantId)
      Select-AzureRmSubscription -SubscriptionId $(SubscriptionId)
      $storage = Get-AzureRmStorageAccount -ResourceGroupName vstsagentpackage -AccountName vstsagentpackage
      Get-ChildItem -LiteralPath "$(System.ArtifactsDirectory)/agent" | ForEach-Object {
        $versionDir = $_.Name.Trim('.zip').Trim('.tar.gz')
        $versionDir = $versionDir.SubString($versionDir.LastIndexOf('-') + 1)
        Write-Host "##vso[task.setvariable variable=ReleaseAgentVersion;]$versionDir"
        Write-Host "Uploading $_ to BlobStorage vstsagentpackage/agent/$versionDir"
        Set-AzureStorageBlobContent -Context $storage.Context -Container agent -File "$(System.ArtifactsDirectory)/agent/$_" -Blob "$versionDir/$_" -Force
        $uploadFiles.Add("/agent/$versionDir/$_")
      }
      Write-Host "Purge Azure CDN Cache"
      Unpublish-AzureRmCdnEndpointContent -EndpointName vstsagentpackage -ProfileName vstsagentpackage -ResourceGroupName vstsagentpackage -PurgeContent $uploadFiles
      Write-Host "Force Refresh Azure CDN Cache"
      Publish-AzureRmCdnEndpointContent -EndpointName vstsagentpackage -ProfileName vstsagentpackage -ResourceGroupName vstsagentpackage -LoadContent $uploadFiles
    displayName: Upload to Azure Blob

  # Create agent release on Github
  - powershell: |
      Write-Host "Creating github release."
      $releaseNotes = [System.IO.File]::ReadAllText("$(Build.SourcesDirectory)\releaseNote.md").Replace("<AGENT_VERSION>","$(ReleaseAgentVersion)")
      $releaseData = @{
        tag_name = "v$(ReleaseAgentVersion)";
        target_commitish = "$(Build.SourceVersion)";
        name = "v$(ReleaseAgentVersion)";
        body = $releaseNotes;
        draft = $false;
        prerelease = $true;
      }
      $releaseParams = @{
        Uri = "https://api.github.com/repos/Microsoft/azure-pipelines-agent/releases";
        Method = 'POST';
        Headers = @{
          Authorization = 'Basic ' + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("vsts:$(GithubToken)"));
        }
        ContentType = 'application/json';
        Body = (ConvertTo-Json $releaseData -Compress)
      }
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      $releaseCreated = Invoke-RestMethod @releaseParams
      Write-Host $releaseCreated
      $releaseId = $releaseCreated.id
      $assets = [System.IO.File]::ReadAllText("$(Build.SourcesDirectory)\assets.json").Replace("<AGENT_VERSION>","$(ReleaseAgentVersion)")
      $assetsParams = @{
        Uri = "https://uploads.github.com/repos/Microsoft/azure-pipelines-agent/releases/$releaseId/assets?name=assets.json"
        Method = 'POST';
        Headers = @{
          Authorization = 'Basic ' + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("vsts:$(GithubToken)"));
        }
        ContentType = 'application/octet-stream';
        Body = [system.Text.Encoding]::UTF8.GetBytes($assets)
      }
      Invoke-RestMethod @assetsParams
    displayName: Create agent release on Github
